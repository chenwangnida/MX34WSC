/*
 * Created on 31. Juli 2005, 19:05
 * 
 * OWL-S Matchmaker
 * 
 * COPYRIGHT NOTICE
 * 
 * Copyright (C) 2005 DFKI GmbH, Germany
 * Developed by Benedikt Fries, Matthias Klusch
 * 
 * The code is free for non-commercial use only.
 * You can redistribute it and/or modify it under the terms
 * of the Mozilla Public License version 1.1  as
 * published by the Mozilla Foundation at
 * http://www.mozilla.org/MPL/MPL-1.1.txt
 */

package de.dfki.owlsmx.gui;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Set;

import javax.swing.JPanel;

import de.dfki.owlsmx.gui.util.GUIState;

/**
 *
 * @author  B
 */
public class ResultOpenWindow extends javax.swing.JPanel implements ActionListener {
    
	private Set result;
	protected javax.swing.JLabel logo;
	private javax.swing.JCheckBox hybrid;
	private javax.swing.JButton launch;
	private javax.swing.JLabel resultWindow;
	private javax.swing.JCheckBox semantic;
	private javax.swing.JCheckBox syntactic;

	
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** Creates new form Result */
    public ResultOpenWindow() {
    	initateComponents();
    }
    
    public ResultOpenWindow(Set result) {
    	initateComponents();
    	this.result = result;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initateComponents() {
        hybrid = new javax.swing.JCheckBox();
        semantic = new javax.swing.JCheckBox();
        syntactic = new javax.swing.JCheckBox();
        launch = new javax.swing.JButton();
        resultWindow = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setMinimumSize(new java.awt.Dimension(140, 450));
        setPreferredSize(new java.awt.Dimension(140, 450));

        hybrid.setText("Hybrid");
        add(hybrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        semantic.setText("Semantic");
        add(semantic, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        syntactic.setText("Syntactic");
        add(syntactic, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        launch.setText("OK");
        add(launch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 120, -1));
        launch.addActionListener(this);
        
        resultWindow.setText("Show in seperate window");
        add(resultWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 200, -1, -1));        

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource(GUIState.logoPath)));
        add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));
    }
    
    private void launchWindow(final JPanel panel) {
		java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowPanelFrame(panel,false).setVisible(true);
            }
        });
    }
    
	public void actionPerformed(ActionEvent event) {
		if (event.getSource().equals(launch)){
			if (hybrid.isSelected())
				launchWindow(new AnswerSet(result, GUIState.SORT_HYBRID));
			if (semantic.isSelected())
				launchWindow(new AnswerSet(result, GUIState.SORT_SEMANTIC));
			if (syntactic.isSelected())
				launchWindow(new AnswerSet(result, GUIState.SORT_SYNTACTIC));
		}
		
	}
	

    
}
