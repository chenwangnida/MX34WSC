/*
 * Created on 30. Juli 2005, 13:56
 * 
 * OWL-S Matchmaker
 * 
 * COPYRIGHT NOTICE
 * 
 * Copyright (C) 2005 DFKI GmbH, Germany
 * Developed by Benedikt Fries, Matthias Klusch
 * 
 * The code is free for non-commercial use only.
 * You can redistribute it and/or modify it under the terms
 * of the Mozilla Public License version 1.1  as
 * published by the Mozilla Foundation at
 * http://www.mozilla.org/MPL/MPL-1.1.txt
 */

package de.dfki.owlsmx.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.UIManager;

import de.dfki.owlsmx.OWLSMXMatchmaker;
import de.dfki.owlsmx.gui.data.TestCollection;
import de.dfki.owlsmx.gui.util.GUIState;
import de.dfki.owlsmx.gui.util.UpdateDataListener;
import de.dfki.owlsmx.similaritymeasures.SimilarityMeasure;
/**
 *
 * @author  Ben
 */
public class MatchmakerGUI extends javax.swing.JPanel implements ActionListener,UpdateDataListener {

	private javax.swing.JButton apply;
	private javax.swing.JRadioButton exact;
	private javax.swing.JLabel l_treshold;
	private javax.swing.JLabel l_variant;
	private javax.swing.JLabel ll_mindom;
	private javax.swing.JLabel logo;
	private javax.swing.JLabel settingsHeadline;
	private javax.swing.ButtonGroup mindom;
	private javax.swing.JRadioButton nearestneighbour;
	private javax.swing.JRadioButton owlsm0;
	private javax.swing.JRadioButton owlsm1;
	private javax.swing.JRadioButton owlsm2;
	private javax.swing.JRadioButton owlsm3;
	private javax.swing.JRadioButton owlsm4;
	private javax.swing.JRadioButton plugin;
	private javax.swing.JSlider similaritytreshold;
	private javax.swing.JRadioButton subsumedby;
	private javax.swing.JRadioButton subsumes;
	private javax.swing.ButtonGroup variant;	
	private javax.swing.JCheckBox owlsmxp;
	private javax.swing.JCheckBox integrative;
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** Creates new form TestCollectionDesigner */
    public MatchmakerGUI() {
         try {
             
        UIManager.setLookAndFeel(                
            "Classic com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
         } catch (Exception e) { }
        initComponents();
        updateData();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        variant = new javax.swing.ButtonGroup();
        mindom = new javax.swing.ButtonGroup();
        l_treshold = new javax.swing.JLabel();
        l_variant = new javax.swing.JLabel();
        ll_mindom = new javax.swing.JLabel();
        settingsHeadline = new javax.swing.JLabel();
        similaritytreshold = new javax.swing.JSlider();
        apply = new javax.swing.JButton();
        owlsm0 = new javax.swing.JRadioButton();
        owlsm1 = new javax.swing.JRadioButton();
        owlsm2 = new javax.swing.JRadioButton();
        owlsm3 = new javax.swing.JRadioButton();
        owlsm4 = new javax.swing.JRadioButton();
        owlsmxp = new javax.swing.JCheckBox();
        integrative = new javax.swing.JCheckBox();
        exact = new javax.swing.JRadioButton();
        plugin = new javax.swing.JRadioButton();
        subsumes = new javax.swing.JRadioButton();
        subsumedby = new javax.swing.JRadioButton();
        nearestneighbour = new javax.swing.JRadioButton();
        logo = new javax.swing.JLabel();

        variant.add(owlsm0);
        variant.add(owlsm1);
        variant.add(owlsm2);
        variant.add(owlsm3);
        variant.add(owlsm4);
        mindom.add(exact);
        mindom.add(plugin);
        mindom.add(subsumes);
        mindom.add(subsumedby);
        mindom.add(nearestneighbour);
        
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setMinimumSize(new java.awt.Dimension(800, 400));
        setPreferredSize(new java.awt.Dimension(800, 400));
        l_treshold.setLabelFor(similaritytreshold);
        l_treshold.setText("Hybrid filters: syntactic similarity treshold");
        add(l_treshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 260, 20));

        l_variant.setText("Please select a variant of the matchmaker");
        add(l_variant, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 260, -1));

        ll_mindom.setText("Minimum degree of match");
        add(ll_mindom, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 200, -1));

        similaritytreshold.setMajorTickSpacing(25);
        similaritytreshold.setMinorTickSpacing(5);
        similaritytreshold.setPaintLabels(true);
        similaritytreshold.setPaintTicks(true);
        similaritytreshold.setValue(80);
        add(similaritytreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, 280, 50));

        settingsHeadline.setText("Please specify the minimum requirements of relevance for the selected matchmaker variant");
        add(settingsHeadline, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 540, -1));
        
        apply.setText("Apply settings to matchmaker");
        apply.addActionListener(this);
        add(apply, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, 540, -1));

        owlsm0.setText("OWLS-M0 - Logic based semantic filters only");
        add(owlsm0, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, -1, -1));

        owlsm1.setSelected(true);
        owlsm1.setText("OWLS-M1 - Hybrid filters using loss of information based similarity measure");
        add(owlsm1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, -1, -1));

        owlsm2.setText("OWLS-M2 - Hybrid filters using extended Jaccard similarity measure");
        add(owlsm2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, -1));

        owlsm3.setText("OWLS-M3 - Hybrid filters using cosine similarity measure");
        add(owlsm3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, -1));

        owlsm4.setText("OWLS-M4 - Hybrid filters using Jensen-shannon divergence based similarity measure");
        add(owlsm4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, -1, -1));
        
        owlsmxp.setText("OWLS-MXP - Datatype compatibility check for composition planning");
        add(owlsmxp, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, -1, -1));
        
        integrative.setText("OWLS-MX2 - Integrative hybrid matching");
        add(integrative, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, -1, -1));

        exact.setText("exact");
        add(exact, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, -1, -1));

        plugin.setText("plug-in");
        add(plugin, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, -1));

        subsumes.setText("subsumes");
        add(subsumes, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 270, -1, -1));

        subsumedby.setText("subsumed-by");
        add(subsumedby, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, -1, -1));

        nearestneighbour.setSelected(true);
        nearestneighbour.setText("nearest-neighbour");
        add(nearestneighbour, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, -1, -1));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource(GUIState.logoPath)));
        add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));
    }
    // </editor-fold>//GEN-END:initComponents
    
    
    
    private short getMinimumDegree() {
    	if (exact.isSelected())
    		return OWLSMXMatchmaker.EXACT;
    	else if (plugin.isSelected())
    		return OWLSMXMatchmaker.PLUGIN;
    	else if (subsumes.isSelected())
    		return OWLSMXMatchmaker.SUBSUMES;
    	else if (subsumedby.isSelected())
    		return OWLSMXMatchmaker.SUBSUMED_BY;
    	else if (nearestneighbour.isSelected())
    		return OWLSMXMatchmaker.NEAREST_NEIGHBOUR;
    	return OWLSMXMatchmaker.FAIL;
    }
    
    private short getMatchmakerVariant() {
    	if (owlsm0.isSelected())
    		return SimilarityMeasure.SIMILARITY_NONE;
    	else if (owlsm1.isSelected())
    		return SimilarityMeasure.SIMILARITY_LOI;
    	else if (owlsm2.isSelected())
    		return SimilarityMeasure.SIMILARITY_EXTENDED_JACCARD;
    	else if (owlsm3.isSelected())
    		return SimilarityMeasure.SIMILARITY_COSINE;
    	else if (owlsm4.isSelected())
    		return SimilarityMeasure.SIMILARITY_JENSEN_SHANNON;
    	return SimilarityMeasure.SIMILARITY_NONE;
    }
    
    private void setMinimumDegree(int degree) {
    	exact.setSelected(false);
    	plugin.setSelected(false);
    	subsumes.setSelected(false);
    	subsumedby.setSelected(false);
    	nearestneighbour.setSelected(false);
    	switch(degree){
    	case OWLSMXMatchmaker.EXACT:
    		exact.setSelected(true);
    		break;
    	case OWLSMXMatchmaker.PLUGIN:
    		plugin.setSelected(true);
    		break;
    	case OWLSMXMatchmaker.SUBSUMES:
    		subsumes.setSelected(true);
    		break;
    	case OWLSMXMatchmaker.SUBSUMED_BY:
    		subsumedby.setSelected(true);
    		break;
    	case OWLSMXMatchmaker.NEAREST_NEIGHBOUR:
    		nearestneighbour.setSelected(true);
    		break;
    	}

    }
    
    private void setMatchmakerVariant(int variant) {
    	owlsm0.setSelected(false);
    	owlsm1.setSelected(false);
    	owlsm2.setSelected(false);
    	owlsm3.setSelected(false);
    	owlsm4.setSelected(false);
    	switch(variant){
    	case SimilarityMeasure.SIMILARITY_NONE:
    		owlsm0.setSelected(true);
    		break;
    	case SimilarityMeasure.SIMILARITY_LOI:
    		owlsm1.setSelected(true);
    		break;
    	case SimilarityMeasure.SIMILARITY_EXTENDED_JACCARD:
    		owlsm2.setSelected(true);
    		break;
    	case SimilarityMeasure.SIMILARITY_COSINE:
    		owlsm3.setSelected(true);
    		break;
    	case SimilarityMeasure.SIMILARITY_JENSEN_SHANNON:
    		owlsm4.setSelected(true);
    		break;
        default:
        	owlsm0.setSelected(true);
    	}
    }
    
    private void setTreshold(double treshold) {    	
    	Long value = new Long(Math.round(treshold*100));
    	similaritytreshold.setValue(value.intValue());
    }
    
    private double getTreshold() {
    	double tresh = (((double)similaritytreshold.getValue())/100.0);
    	//System.err.println(this.getClass().toString() + "|getTreshold: " + tresh);
    	return tresh;
    }
    
	public void actionPerformed(ActionEvent event) {
		if (event.getSource().equals(apply)) {
	        GUIState.getInstance().setMeasures(getMinimumDegree(),getMatchmakerVariant(),getTreshold());
	        GUIState.getInstance().setOWLSMXP(owlsmxp.isSelected());
	        GUIState.getInstance().setIntegrative(integrative.isSelected());
			if ( (!TestCollection.getInstance().checkQueriesAndServicesSets(this)) ||
					(!TestCollection.getInstance().checkRelevanceSets(this)) ) {
				return;
			}
	        //System.out.println("Minimum degree:     " + getMinimumDegree());
	        //System.out.println("Matchmaker variant: " + getMatchmakerVariant());
	        //System.out.println("Similaritytreshold: " + getTreshold());
		}			
	}

	public void updateData() {
		setMinimumDegree(GUIState.getInstance().getMinDegree());
        setMatchmakerVariant(GUIState.getInstance().getSimilarityMeasure());
        setTreshold(GUIState.getInstance().getTreshold());		
	}
    
}
